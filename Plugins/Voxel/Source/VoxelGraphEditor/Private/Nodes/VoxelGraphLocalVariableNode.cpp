// Copyright Voxel Plugin, Inc. All Rights Reserved.

#include "VoxelGraphLocalVariableNode.h"
#include "VoxelGraphToolkit.h"

void UVoxelGraphLocalVariableNode::PostPasteNode()
{
	Super::PostPasteNode();

	UVoxelGraph* Graph = GetTypedOuter<UVoxelGraph>();
	if (!ensure(Graph))
	{
		return;
	}

	if (Graph->Parameters.FindByKey(Guid))
	{
		return;
	}

	const FVoxelGraphParameter* Parameter = Graph->Parameters.FindByKey(CachedParameter.Name);
	if (Parameter &&
		Parameter->Type == CachedParameter.Type &&
		Parameter->ParameterType == EVoxelGraphParameterType::LocalVariable)
	{
		// Update Guid
		Guid = Parameter->Guid;
		return;
	}

	// Add new local variable
	// Regenerate guid to be safe
	Guid = FGuid::NewGuid();
	CachedParameter.Guid = Guid;

	Graph->Parameters.Add(CachedParameter);

	ensure(Graph->Parameters.Last().Guid == CachedParameter.Guid);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

void UVoxelGraphLocalVariableDeclarationNode::AllocateParameterPins(const FVoxelGraphParameter& Parameter)
{
	{
		UEdGraphPin* Pin = CreatePin(EGPD_Input, Parameter.Type.GetEdGraphPinType(), FName("InputPin"));
		Pin->bAllowFriendlyName = true;
		Pin->PinFriendlyName = FText::FromName(Parameter.Name);

		if (Parameter.Type.HasPinDefaultValue())
		{
			Parameter.DefaultValue.ApplyToPinDefaultValue(*Pin);

			const FVoxelPinValue AutoDefaultValue = FVoxelPinValue(Parameter.Type.GetInnerType());
			Pin->AutogeneratedDefaultValue = AutoDefaultValue.ExportToString();
		}
	}

	{
		UEdGraphPin* Pin = CreatePin(EGPD_Output, Parameter.Type.GetEdGraphPinType(), FName("OutputPin"));
		Pin->bAllowFriendlyName = true;
		Pin->PinFriendlyName = INVTEXT(" ");
	}
}

void UVoxelGraphLocalVariableDeclarationNode::PinDefaultValueChanged(UEdGraphPin* Pin)
{
	ON_SCOPE_EXIT
	{
		Super::PinDefaultValueChanged(Pin);
	};

	if (Pin->Direction != EGPD_Input ||
		Pin->bOrphanedPin)
	{
		return;
	}

	FVoxelGraphParameter* Parameter = GetParameter();
	if (!ensure(Parameter))
	{
		return;
	}

	{
		UVoxelGraph& Graph = *GetTypedOuter<UVoxelGraph>();

		FVoxelTransaction Transaction(Graph);
		Transaction.SetProperty(FindFPropertyChecked_Impl<FVoxelPinValue>("Float"));
		Transaction.SetMemberProperty(FindFPropertyChecked(UVoxelGraph, Parameters));

		Parameter->DefaultValue = FVoxelPinValue::MakeFromPinDefaultValue(*Pin);

		// Update others
		for (UEdGraphNode* Node : GetGraph()->Nodes)
		{
			const UVoxelGraphLocalVariableDeclarationNode* DeclarationNode = Cast<UVoxelGraphLocalVariableDeclarationNode>(Node);
			if (!DeclarationNode ||
				DeclarationNode->Guid != Guid)
			{
				continue;
			}

			UEdGraphPin* OtherPin = DeclarationNode->GetInputPin(0);
			OtherPin->DefaultValue = Pin->DefaultValue;
			OtherPin->DefaultObject = Pin->DefaultObject;
		}
	}

	Pin = GetInputPin(0);
}

FText UVoxelGraphLocalVariableDeclarationNode::GetNodeTitle(ENodeTitleType::Type TitleType) const
{
	if (TitleType != ENodeTitleType::FullTitle)
	{
		return INVTEXT("LOCAL");
	}

	return FText::FromName(GetParameterSafe().Name);
}

void UVoxelGraphLocalVariableDeclarationNode::PostReconstructNode()
{
	if (const FVoxelGraphParameter* Parameter = GetParameter())
	{
		if (Parameter->Type.HasPinDefaultValue())
		{
			if (UEdGraphPin* InputPin = GetInputPin(0))
			{
				Parameter->DefaultValue.ApplyToPinDefaultValue(*InputPin);
			}
		}
	}

	Super::PostReconstructNode();
}

UVoxelGraphNode* UVoxelGraphLocalVariableDeclarationNode::IsInLoop()
{
	TSet<UVoxelGraphNode*> VisitedNodes;
	TArray<UVoxelGraphNode*> NodesToProcess;
	NodesToProcess.Add(this);
	while (NodesToProcess.Num() > 0)
	{
		UVoxelGraphNode* CurrentNode = NodesToProcess.Pop(false);

		if (VisitedNodes.Contains(CurrentNode))
		{
			continue;
		}
		VisitedNodes.Add(CurrentNode);

		if (CurrentNode->GetInputPins().Num() == 0)
		{
			continue;
		}

		for (UEdGraphPin* InputPin : CurrentNode->GetInputPins())
		{
			for (const UEdGraphPin* LinkedPin : InputPin->LinkedTo)
			{
				if (UVoxelGraphLocalVariableNode* LocalVariableNode = Cast<UVoxelGraphLocalVariableNode>(LinkedPin->GetOwningNode()))
				{
					if (LocalVariableNode->Guid == Guid)
					{
						return LocalVariableNode;
					}

					if (const UVoxelGraphLocalVariableUsageNode* UsageNode = Cast<UVoxelGraphLocalVariableUsageNode>(LocalVariableNode))
					{
						if (UVoxelGraphLocalVariableDeclarationNode* Declaration = UsageNode->FindDeclaration())
						{
							NodesToProcess.Add(Declaration);
						}
					}
					else if (UVoxelGraphLocalVariableDeclarationNode* DeclarationNode = Cast<UVoxelGraphLocalVariableDeclarationNode>(LocalVariableNode))
					{
						NodesToProcess.Add(DeclarationNode);
					}
				}
				else if (UVoxelGraphNode* VoxelGraphNode = Cast<UVoxelGraphNode>(LinkedPin->GetOwningNode()))
				{
					if (VoxelGraphNode->GetInputPins().Num() != 0)
					{
						NodesToProcess.Add(VoxelGraphNode);
					}
				}
				else
				{
					ensure(false);
				}
			}
		}
	}

	return nullptr;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

void UVoxelGraphLocalVariableUsageNode::AllocateParameterPins(const FVoxelGraphParameter& Parameter)
{
	UEdGraphPin* Pin = CreatePin(EGPD_Output, Parameter.Type.GetEdGraphPinType(), FName("OutputPin"));
	Pin->PinFriendlyName = FText::FromName(Parameter.Name);
}

FText UVoxelGraphLocalVariableUsageNode::GetNodeTitle(ENodeTitleType::Type TitleType) const
{
	if (TitleType != ENodeTitleType::FullTitle)
	{
		return {};
	}

	return FText::FromName(GetParameterSafe().Name);
}

void UVoxelGraphLocalVariableUsageNode::JumpToDefinition() const
{
	UVoxelGraphLocalVariableDeclarationNode* DeclarationNode = FindDeclaration();
	if (!DeclarationNode)
	{
		return;
	}

	const TSharedPtr<SGraphEditor> ActiveGraphEditor = GetToolkit()->GetActiveGraphEditor();
	ActiveGraphEditor->ClearSelectionSet();
	ActiveGraphEditor->SetNodeSelection(DeclarationNode, true);
	ActiveGraphEditor->ZoomToFit(true);
}

UVoxelGraphLocalVariableDeclarationNode* UVoxelGraphLocalVariableUsageNode::FindDeclaration() const
{
	TArray<UVoxelGraphLocalVariableDeclarationNode*> DeclarationNodes;
	GetGraph()->GetNodesOfClass<UVoxelGraphLocalVariableDeclarationNode>(DeclarationNodes);

	for (UVoxelGraphLocalVariableDeclarationNode* Node : DeclarationNodes)
	{
		if (Node->Guid == Guid)
		{
			return Node;
		}
	}

	return nullptr;
}